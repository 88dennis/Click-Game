{"ast":null,"code":"import _objectSpread from \"/Users/dennis/Desktop/HW-FILES/click-game/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/dennis/Desktop/HW-FILES/click-game/src/App.js\";\nimport React, { Component } from \"react\";\nimport VillainCard from \"./components/VillainCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\";\nimport villains from \"./images.json\";\nconsole.log(villains);\n\nfunction shuffleArray(array) {\n  let i = array.length - 1;\n\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  return array;\n}\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      villains,\n      clicked: false,\n      score: 0,\n      losses: 0,\n      guesses: [],\n      maxScore: 0\n    };\n\n    this.handleBtnClick = villainId => {\n      const newState = _objectSpread({}, this.state); //cloning the old state\n\n\n      if (newState.guesses.includes(villainId)) {\n        console.log(\"you lose\");\n        newState.losses = newState.losses + 1;\n        newState.guesses = [];\n        newState.score = 0;\n      } else {\n        newState.score = newState.score + 1;\n        newState.guesses.push(villainId);\n      }\n\n      newState.villains = shuffleArray(newState.villains); //copying the array\n\n      if (newState.score > newState.maxScore) {\n        newState.maxScore = newState.score;\n      }\n\n      this.setState(newState);\n    };\n  }\n\n  // removeFriend = id => {\n  //   // Filter this.state.friends for friends with an id not equal to the id being removed\n  //   const villains = this.state.villains.filter(villain => villain.id !== id);\n  //   // Set this.state.friends equal to the new friends array\n  //   this.setState({ villains });  \n  // };\n  render() {\n    // const shuffledVillains = ;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      score: this.state.score,\n      losses: this.state.losses,\n      maxScore: this.state.maxScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, this.state.villains.map(villain => React.createElement(VillainCard, {\n      handleBtnClick: this.handleBtnClick,\n      id: villain.id,\n      key: villain.id,\n      name: villain.name,\n      image: villain.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/dennis/Desktop/HW-FILES/click-game/src/App.js"],"names":["React","Component","VillainCard","Wrapper","Navbar","villains","console","log","shuffleArray","array","i","length","j","Math","floor","random","temp","App","state","clicked","score","losses","guesses","maxScore","handleBtnClick","villainId","newState","includes","push","setState","render","map","villain","id","name","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport VillainCard from \"./components/VillainCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\";\nimport villains from \"./images.json\";\n\n\nconsole.log(villains)\n\nfunction shuffleArray(array) {\n  let i = array.length - 1;\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\n\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    villains,\n    clicked: false,\n    score: 0,\n    losses: 0,\n    guesses:[],\n    maxScore: 0\n  };\n\n//if clicked guesses includes\n\n  handleBtnClick = villainId => {\n    const newState = {...this.state};\n    //cloning the old state\n\n    if(newState.guesses.includes(villainId)) {\n      console.log(\"you lose\");\n      newState.losses = newState.losses + 1;\n      newState.guesses = [];   \n      newState.score = 0; \n    }\n    else\n    { newState.score = newState.score + 1;\n      newState.guesses.push(villainId);\n    }\n    newState.villains = shuffleArray(newState.villains);\n    //copying the array\n\n    if(newState.score > newState.maxScore) { newState.maxScore = newState.score}\n    \n    this.setState(newState);\n  };\n\n  // removeFriend = id => {\n  //   // Filter this.state.friends for friends with an id not equal to the id being removed\n  //   const villains = this.state.villains.filter(villain => villain.id !== id);\n  //   // Set this.state.friends equal to the new friends array\n  //   this.setState({ villains });  \n  // };\n\n  render() {\n    \n    // const shuffledVillains = ;\n\n    return (\n      <div>\n      <Navbar \n      score = {this.state.score}\n      losses = {this.state.losses}\n      maxScore = {this.state.maxScore}>\n      \n      </Navbar>\n      <Wrapper>\n\n        {this.state.villains.map(villain => (\n          \n          <VillainCard\n            handleBtnClick={this.handleBtnClick}\n            id={villain.id}\n            key={villain.id}\n            name={villain.name}\n            image={villain.image}\n          />\n          \n        ))}\n      </Wrapper>\n\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}